// BTS -> Binary Search Tree 

// where the values towards the root of the tree should be small
// right of the tree should be greater than root

class Node{
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}


//             8
//     5               12
// 4       7      10         14
//      6                13

// from the above tree, each the nodes left value should be smaller than the nodes, right should be higher
// L40. Search in a binary tree

// given the above tree, return the entire node of node 10, if no node is found return -1

// step1: if the give value is greater than node 10, traverse in the right, if the given value is smaller than root, traverse in the left


function searchNode(root, value) {

    let ans = -1;
    while(root) {
        if(root.data > value) {
            root = root.left;
        } else {
            if(root.data === value) return root;
            ans = root.data;
            root = root.right;
        }
    }

    return ans;
}


// recursive

function searchNode(root, key) {

    if(root === null) return -1;

    if(root.data === key) return root;
    if(root.data > key) {
        return searchNode(root.left, key);
    } else {
        return searchNode(root.right, key);
    }
}
const root = new Node(8);
root.left = new Node(5);
root.right = new Node(12);

root.left.left = new Node(4);
root.left.right = new Node(7);

root.right.left = new Node(10);
root.right.right = new Node(14);

root.left.right.left = new Node(6);
root.right.right.left = new Node(13);

let value = 6;  // node found
// let value = 20;  // not found
console.log(searchNode(root, value));
